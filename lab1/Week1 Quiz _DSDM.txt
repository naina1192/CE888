1.

import numpy as np

def list_to_array(myList):
    ## Your code goes here
    a = np.array(myList)
    return a
	
2.	
import numpy as np

def avg(numbers):
    ## Your code goes here
    b = np.average(numbers)
    return b
	
3.
import numpy as np

def percentile(numbers, perc):
    ## Your code goes here
    n = np.percentile(numbers, perc)
    return n
	


4.
import numpy as np

def sorting(numbers):
    ## Your code goes here
    return np.sort(numbers)
    
5.	
import numpy as np

def median_of_array_rows(numbers):
    ## Your code goes here
    a = np.median(numbers,axis = 1)
    return a

6.
import numpy as np

def mean_of_array_rows(numbers):
    ## Your code goes here
    a = np.mean(numbers,axis = 1)
    return a

7.

mport numpy as np

# Define our actions

def action_0():
    ''' This should return 1 with probability 50%, and 0 with probability 50%'''
    ## Your code here
    return np.random.choice([1, 0], p=[0.5, 0.5])


def action_1():
    ''' This should return 1 with probability 60%, and 0 with probability 40%'''
    ## Your code here
    return np.random.choice([1, 0], p=[0.6, 0.4])


def action_2():
    ''' This should return 1 with probability 20%, and 0 with probability 80%'''
    ## Your code here
    return np.random.choice([1, 0], p=[0.2, 0.8])


8.	
import numpy as np

# Define our actions

def policy():
    ''' This should return 0 with probability 40%; 1 with probability 10%; or 2 with probability 50%
    ## Your code here '''
    return np.random.choice([0, 1,2], p=[0.4, 0.1,0.5])
	

9. 
import numpy as np


def policy(p1, p2, p3, p4 = 0.5):
    # p1, p2, p3 are, respectively, the probabilities of choosing between 1, 2, and 3
    # the default value for p4 should be 0.5
    # action equals 1 with probability p1, 2 with probability p2, and 3 with probability p3
    action = np.random.choice([1,2,3],p=[p1, p2,p3]) # Your code here
    # Depending on the value of 'action', we choose one of the following options:
    # if action is 1: return action1()
    # if action is 2: return action2()
    # if action is 3: return action1() with probability p4, and action2() otherwise

    ## YOUR CODE HERE
    if action == 1:
        return action1()
    
    if action == 2:
        return action2()
    
    if action == 3:
        return np.random.choice([action1(),action2()], p=[p4,1-p4])



def action1(p = 0.2):
    # Return 0 with probability p and 1 otherwise
    # the default value for p should be 0.2
    
    ## YOUR CODE HERE
    return np.random.choice([0,1], p=[p,1-p])